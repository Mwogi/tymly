{
  "jsonSchema": {
    "title": "Claim an expense",
    "description": "Claim for some travel or similar",
    "type": "object",
    "required": [
      "firstName",
      "lastName"
    ],
    "properties": {
      "firstName": {
        "type": "string",
        "title": "First name"
      },
      "lastName": {
        "type": "string",
        "title": "Last name"
      },
      "age": {
        "type": "integer",
        "title": "Age"
      },
      "reasonForClaim": {
        "type": "string",
        "title": "Reason for claim"
      },
      "amountToClaim": {
        "type": "number",
        "multipleOf": 0.01
      },
      "telephone": {
        "type": "string",
        "title": "Telephone",
        "minLength": 10
      },
      "date": {
        "type": "string",
        "title": "Date"
      }
    }
  },
  "uiSchema": {
    "firstName": {
      "ui:widget": "textField",
      "ui:autofocus": true,
      "ui:emptyValue": ""
    },
    "lastName": {
      "ui:widget": "textField",
      "ui:autofocus": true,
      "ui:emptyValue": ""
    },
    "age": {
      "ui:widget": "textField",
      "ui:title": "Age of person",
      "ui:description": "(earthian year)"
    },
    "reasonForClaim": {
      "ui:widget": "textField",
      "ui:title": "Reason for claim"
    },
    "amountToClaim": {
      "ui:widget": "textField",
      "ui:title": "Reason for claim"
    },
    "date": {
      "ui:widget": "alt-datetime"
    },
    "telephone": {
      "ui:widget": "telephone",
      "ui:options": {
        "inputType": "tel"
      }
    }
  },
  "widgets": {
    "textField": "TextField",
    "telephone": "TextField",
    "textPassword": "TextPassword"
  }, 
  "validation_schema": {
    "firstName": {
      "expression": "(/[0-9]/).test(firstName)", 
      "elements": ["firstName"], 
      "error": "firstName should be a string"
    },
    "lastName": {
      "expression": "(/[0-9]/).test(lastName)", 
      "elements": ["lastName"], 
      "error": "lastName should be a string"
    },
    "reasonForClaim": {
      "expression": "(/[0-9]/).test(bio)", 
      "elements": ["bio"], 
      "error": "bio should be a string"
    },
    "telephone": {
      "expression": "(/[a-zA-Z]/).test(telephone)", 
      "elements": ["telephone"], 
      "error": "Telephone should only contain numbers"
    }
  }
}