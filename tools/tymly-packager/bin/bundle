#!/usr/bin/env node

const moment = require('moment')
const bundleForDeploy = require('../lib/bundler.js')
const path = require('path')
const commander = require('commander')
const colors = require('colors/safe')

run(...parseArgs(process.argv))

async function run (directory, bundleName, quiet) {
  try {
    if (!quiet) {
      console.log(colors.cyan.bold("It's the Tymly Bundler!"))
    }

    const fullDirectoryName = path.resolve(process.cwd(), directory)
    const outputName = bundleName || `${path.basename(fullDirectoryName)}-${moment().format('YYYYMMDD-HHmmss')}.tgz`
    const tarball = await bundleForDeploy(directory, path.resolve(process.cwd(), outputName), !quiet ? console.log : () => {})
    const displayPath = path.relative(process.cwd(), tarball)
    console.log(colors.cyan(`Created ${displayPath}`))
  } catch (err) {
    console.error(err)
  }
} // run

/// //////////////////////////////
function parseArgs (args) {
  let dir = null

  commander.usage('[options] directory')
    .arguments('<directory>')
    .option('-t, --tar <tarball-name>', 'tarball name')
    .option('-q, --quiet', 'quiet')
    .action(d => { dir = d })
  commander.parse(args)

  if (!dir) {
    commander.help(txt => colors.red(txt))
  } // if ...

  const tar = fixSuffix(commander.tar)

  return [dir, tar, commander.quiet]
} // parseArgs

function fixSuffix (tar) {
  if (!tar) {
    return
  }

  if (tar.endsWith('.tgz') || tar.endsWith('.tar.gz')) {
    return tar
  }

  return `${tar}.tgz`
} // fixSuffix
