buildscript {
  repositories {
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    //classpath "gradle.plugin.org.ysb33r.gradle:nodejs-gradle-plugin:0.2"
    //classpath "org.ysb33r.gradle:grolifant:0.3.1"
    classpath files('./gradle/libs/nodejs-gradle-plugin-0.3.jar')
    classpath files('./gradle/libs/grolifant-0.5.1.jar')
    classpath 'gradle.plugin.com.github.honourednihilist:gradle-postgresql-embedded:0.2.0'
  }
}

apply plugin: 'com.github.honourednihilist.gradle-postgresql-embedded'
apply plugin: 'org.ysb33r.nodejs.lerna'

String pg_username = 'postgres'
String pg_password = 'postgres'
String pg_db_name = 'test_db'
int pg_port = 54321

postgresEmbedded {
       version = "V9_6_3"
       host = "localhost"
       port = pg_port
       dbName = pg_db_name
       username = pg_username
       password = pg_password
       artifactStorePath = "./.embedpostgresql" // where PostgreSQL distributions are stored after downloading, inside home directory by default
       stopWhenBuildFinished = true
       timeoutMillisBeforeStop = 0
}

String pg_connection="postgres://${pg_username}:${pg_password}@localhost:${pg_port}/${pg_db_name}"
String buildDir='./build'

//////////////////////////////////////
task cleanTopLevelNodeModules (type: Delete) {
  delete './node_modules'
}

task cleanPackageNodeModules (type: org.ysb33r.gradle.nodejs.tasks.LernaTask) {
  command 'clean'
}

task cleanTestFiles (type: Delete) {
  delete fileTree(dir: '.', include: '*/*/test/TEST-*.xml')
}

task cleanBuild (type: Delete) {
  delete buildDir
}

task npmBootstrap (type: org.ysb33r.gradle.nodejs.tasks.NpmTask) {
  command 'install'
}

String tarballDir = "${buildDir}/tarball"
String tarfileName = "${tarballDir}/tymly-${getDate()}.tgz"
def getDate() { new Date().format('yyyyMMdd-HHmmss') }

task createTarball (type: Exec,
                    dependsOn: [npmBootstrap]) {
  doFirst {
    mkdir tarballDir
  }

  commandLine 'npm', 'run', 'bundle', '--', '--tar', tarfileName
}

String coreDockerDir = './tools/tymly-dockerize-core'
String coreDockerTag = 'wmfs/tymly-core'
String serverDockerDir = './tools/tymly-dockerize-server'
String serverDockerTag = 'wmfs/tymly'

task dropTarfileToDocker (type: Copy,
                          dependsOn: [createTarball]) {
  from tarfileName
  into coreDockerDir
  rename { fileName -> "bundle.tgz" }
} // dropTarfileToDocker

task dockerBuildCore (type: Exec,
                      dependsOn: [dropTarfileToDocker]) {
  workingDir coreDockerDir
  commandLine 'docker', 'build', '--tag', coreDockerTag, '.'
} // dockerBuildCore

task dockerBuildServer (type: Exec,
                        dependsOn: [dockerBuildCore]) {
  workingDir serverDockerDir
  commandLine 'docker', 'build', '--tag', serverDockerTag, '.'
} // dockerBuildServer

//////////////////////////////////////
// Clean tasks
task clean (dependsOn: [cleanTestFiles, cleanBuild]) {
  description 'Clean project output'
  group 'Build'
}

task cleanAll (dependsOn: [clean, cleanPackageNodeModules, cleanTopLevelNodeModules]) {
  description 'Clean project output, discard all node_modules'
  group 'Build'
}

//////////////////////////////////////
// Lerna tasks
task bootstrap (type: org.ysb33r.gradle.nodejs.tasks.LernaTask,
                dependsOn: [npmBootstrap]) {
  description 'Lerna bootstrap'
  group 'Build'
  command 'bootstrap'
}

task lint (type: org.ysb33r.gradle.nodejs.tasks.LernaTask,
           dependsOn: [bootstrap]) {
  description 'Lint all the things'
  group 'Build'

  command 'run'
  cmdArgs 'lint', '--concurrency', '1'
}

task test (type: org.ysb33r.gradle.nodejs.tasks.LernaTask,
           dependsOn: [bootstrap, startPostgres, cleanTestFiles]) {
  description 'Runs tests'
  group 'Build'

  command 'run'
  cmdArgs 'test', '--concurrency', '1'
  environment PG_CONNECTION_STRING: pg_connection
}

task ci_test (type: org.ysb33r.gradle.nodejs.tasks.LernaTask,
           dependsOn: [bootstrap, startPostgres, cleanTestFiles]) {
  description 'Runs tests, captures output in Jenkins readable XML Files'
  group 'Build'

  command 'run'
  cmdArgs 'test', '--concurrency', '1', '--', '--', '--reporter', 'xunit', '--reporter-options', 'output=./test/TEST-result.xml'
  environment PG_CONNECTION_STRING: pg_connection
}

//////////////////////////////////////
// Packaging tasks
task bundle (dependsOn: [createTarball, dropTarfileToDocker]) {
  group 'Build'
  description 'Creates an installable Tymly package'
}

task dockerBuild (dependsOn: [dockerBuildServer]) {
  group 'Build'
  description 'Build a runnable Tymly Docker image'
} // dockerBuild
